<!--
  JBoss, Home of Professional Open Source
  Copyright 2008, Red Hat Middleware LLC, and others contributors as indicated
  by the @authors tag. All rights reserved.
  See the copyright.txt in the distribution for a
  full listing of individual contributors.
  This copyrighted material is made available to anyone wishing to use,
  modify, copy, or redistribute it subject to the terms and conditions
  of the GNU Lesser General Public License, v. 2.1.
  This program is distributed in the hope that it will be useful, but WITHOUT A
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
  PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
  You should have received a copy of the GNU Lesser General Public License,
  v.2.1 along with this distribution; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  MA  02110-1301, USA.
-->
<!DOCTYPE project [
<!ENTITY includepath-java '
<includepath path="${JAVA_HOME}/include" />
<includepath path="${JAVA_HOME}/include/${PLATFORM}" />
'>
<!ENTITY includepath-log4cxx '
<includepath path="${LOG4CXX_ROOT}/src/main/include" />
'>
<!ENTITY libsets-log4cxx '
<fileset dir="${LOG4CXX_ROOT}/target/debug/shared/" includes="${lib.prefix}log4cxx${lib.suffix}.*"/>
'>
<!ENTITY includepath-expat '
<includepath path="${EXPAT_ROOT}/Source/lib"  if="is-msvc"/>
'>
<!ENTITY libsets-expat '
<fileset dir="${EXPAT_LIB_DIR}" includes="${lib.prefix}expat${lib.suffix}.*"/>
'>
<!ENTITY includepath-cppunit '
<includepath path="${CPPUNIT_ROOT}/include"  if="is-msvc"/>
'>
<!ENTITY libsets-cppunit '
<fileset dir="${CPPUNIT_LIB_DIR}" includes="${lib.prefix}cppunit${lib.suffix}.*"/>
'>
<!ENTITY includepath-tao '
<includepath path="${ACE_ROOT}" />
<includepath path="${TAO_ROOT}" />
<includepath path="${TAO_ROOT}/orbsvcs" />
'>
<!ENTITY libsets-tao '
<fileset dir="${ACE_ROOT}/lib/" includes="${lib.prefix}TAO_CosNaming${lib.suffix}.*" />
<fileset dir="${ACE_ROOT}/lib/" includes="${lib.prefix}TAO_AnyTypeCode${lib.suffix}.*" />
<fileset dir="${ACE_ROOT}/lib/" includes="${lib.prefix}TAO${lib.suffix}.*" />
<fileset dir="${ACE_ROOT}/lib/" includes="${lib.prefix}TAO_PortableServer${lib.suffix}.*" />
<fileset dir="${ACE_ROOT}/lib/" includes="${lib.prefix}ACE${lib.suffix}.*"/>
'>
<!ENTITY libsets-sys '
<syslibset libs="advapi32 mswsock ws2_32 shell32" if="is-msvc" />
<syslibset libs="stdc++" if="is-gcc"/>
'>
<!ENTITY includepath-main-atmibroker-idl '
<includepath path="${ATMIBROKER_SRC_DIR}/atmibroker-idl/src/main/include" />
<includepath path="${ATMIBROKER_SRC_DIR}/atmibroker-idl/target/generated/tao_idl" />
'>
<!ENTITY libsets-atmibroker-idl '
<fileset includes="${lib.prefix}atmibroker-idl${lib.suffix}.*" dir="${ATMIBROKER_SRC_DIR}/atmibroker-idl/target/${configuration.type}/${lib.type}" />
'>
<!ENTITY includepath-main-atmibroker-core '
<includepath path="${ATMIBROKER_SRC_DIR}/atmibroker-core/src/main/include" />
'>
<!ENTITY includepath-export-atmibroker-core '
<includepath path="${ATMIBROKER_SRC_DIR}/atmibroker-core/src/export/include" />
'>
<!ENTITY libsets-atmibroker-core '
<fileset includes="${lib.prefix}atmibroker-core${lib.suffix}.*" dir="${ATMIBROKER_SRC_DIR}/atmibroker-core/target/${configuration.type}/${lib.type}" />
'>
<!ENTITY includepath-main-atmibroker-xatmi '
<includepath path="${ATMIBROKER_SRC_DIR}/atmibroker-xatmi/src/main/include" />
'>
<!ENTITY includepath-export-atmibroker-xatmi '
<includepath path="${ATMIBROKER_SRC_DIR}/atmibroker-xatmi/src/export/include" />
'>
<!ENTITY libsets-atmibroker-xatmi '
<fileset includes="${lib.prefix}atmibroker-xatmi${lib.suffix}.*" dir="${ATMIBROKER_SRC_DIR}/atmibroker-xatmi/target/${configuration.type}/${lib.type}" />
'>
<!ENTITY includepath-main-atmibroker-tx '
<includepath path="${ATMIBROKER_SRC_DIR}/atmibroker-tx/src/main/include" />
'>
<!ENTITY includepath-export-atmibroker-tx '
<includepath path="${ATMIBROKER_SRC_DIR}/atmibroker-tx/src/export/include" />
'>
<!ENTITY libsets-atmibroker-tx '
<fileset includes="${lib.prefix}atmibroker-tx${lib.suffix}.*" dir="${ATMIBROKER_SRC_DIR}/atmibroker-tx/target/${configuration.type}/${lib.type}" />
'>
<!ENTITY compiler-args-gcc '
<compilerarg value="-O0" if="debug" />
<compilerarg value="-g3" if="debug" />
<compilerarg value="-O3" unless="debug" />
<compilerarg value="-Wall" />
<compilerarg value="-c" />
<compilerarg value="-fmessage-length=0" />
<compilerarg value="-fPIC" />
'>
<!ENTITY compiler-args-msvc '
<compilerarg value="/wd4820" />
<compilerarg value="/wd4668" />
<compilerarg value="/wd4365" />
<compilerarg value="/wd4996" />
<compilerarg value="/wd4625" />
<compilerarg value="/wd4626" />
<compilerarg value="/wd4619" />
<compilerarg value="/wd4505" />
<compilerarg value="/wd4640"/>
'>
<!ENTITY includepath-main-dependencies '
	&includepath-log4cxx;
	&includepath-tao;
	&includepath-main-atmibroker-idl;
'>
<!ENTITY libsets-main-dependencies '
	<libset dir="target/dependencies" libs="expat TAO_CosNaming TAO_AnyTypeCode TAO TAO_PortableServer ACE log4cxx atmibroker-idl" />
'>
<!ENTITY includepath-test-dependencies '
	&includepath-cppunit;
	&includepath-tao;
'>
<!ENTITY libsets-test-dependencies '
	<libset dir="target/dependencies" libs="cppunit expat TAO_CosNaming TAO_AnyTypeCode TAO TAO_PortableServer ACE log4cxx atmibroker-idl" />
'>
<!ENTITY libsets-runtime-dependencies '
	&libsets-cppunit;
	&libsets-expat;
	&libsets-tao;
	&libsets-log4cxx;
	&libsets-atmibroker-idl;
'>
]>
<project name="atmibroker-core">
	<taskdef resource="net/sf/antcontrib/antlib.xml" />
	<taskdef resource="cpptasks.tasks" />
	<property file="build.properties" />
	<property name="src.main" value="src/main/cpp" />
	<property name="src.excludes" value="" />
	<property name="test.excludes" value="" />
	<property name="lib.type" value="shared" />
	<property name="runtime" value="dynamic" />

	<target name="init">
		<fail unless="ATMIBROKER_SRC_DIR" />
		<fail unless="configuration.type" />
		<fail unless="toolchain.compiler" />
		<fail unless="test.output.type" />
		<condition property="is-msvc">
			<equals arg1="${toolchain.compiler}" arg2="msvc" />
		</condition>
		<condition property="export.dir">
			<available file="src/export/include" />
		</condition>
		<condition property="debug" value="true">
			<equals arg1="${configuration.type}" arg2="debug" casesensitive="false" />
		</condition>
		<condition property="lib.suffix" value="d">
			<and>
				<isset property="is-msvc" />
				<isset property="debug" />
			</and>
		</condition>
		<condition property="lib.suffix" value="">
			<not>
				<equals arg1="lib.suffix" arg2="d" />
			</not>
		</condition>
		<condition property="lib.prefix" value="lib">
			<not>
				<isset property="is-msvc" />
			</not>
		</condition>
		<condition property="lib.prefix" value="">
			<isset property="is-msvc" />
		</condition>
	</target>

	<target name="clean" depends="init">
		<delete dir="target/cpp-classes" />
		<delete dir="target/cpp-test-classes" />
		<delete dir="target/dependencies" />
	</target>

	<target name="generate-sources">
		<condition property="tao_idl.exe.exists">
			<available file="${TAO_IDL}" />
		</condition>
		<fail unless="tao_idl.exe.exists" />

		<mkdir dir="target/generated/tao_idl" />
		<apply executable="${TAO_IDL}" parallel="false" failonerror="true">
			<env key="ACE_ROOT" path="${ACE_ROOT}" />
			<env key="LD_LIBRARY_PATH" path="${ACE_ROOT}/lib:${ACE_ROOT}/TAO/TAO_IDL" />
			<arg line="-o target/generated/tao_idl/ -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I${ace.root}/TAO -I${ace.root}/TAO/tao -I${ace.root}/TAO/tao/orbsvcs -Isrc/main/idl -Wb,export_macro=ATMIBROKER_IDL_DLL -Wb,export_include=atmiBrokerIdlMacro.h" />
			<fileset dir="src" casesensitive="yes">
				<patternset id="idl.sources">
					<include name="**/*.idl" />
				</patternset>
			</fileset>
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*" to="target/generated/tao_idl/*" />
					<mapper>
						<globmapper from="*.idl" to="*C.cpp" />
						<globmapper from="*.idl" to="*C.h" />
						<globmapper from="*.idl" to="*S.cpp" />
						<globmapper from="*.idl" to="*S.h" />
					</mapper>
				</chainedmapper>
			</mapper>

		</apply>
	</target>

	<target name="compile" depends="package">
		<mkdir dir="target/cpp-classes" />
		<mkdir dir="target/${configuration.type}/${lib.type}" />
		<cc name="${toolchain.compiler}" exceptions="true" outfile="target/${configuration.type}/${lib.type}/${ant.project.name}" subsystem="console" multithreaded="true" runtime="${runtime}" outtype="${lib.type}" objdir="target/cpp-classes" debug="${debug}">
			<compiler name="${toolchain.compiler}" unless="is-msvc">
				&compiler-args-gcc;
			</compiler>
			<compiler name="${toolchain.compiler}" if="is-msvc">
				&compiler-args-msvc;
			</compiler>

			<fileset dir="${src.main}" includes="**/*.c*" excludes="${src.excludes}" />

			<defineset define="TAO_COMP" />
			<defineset define="${export.dll}" if="export.dll" />
			<defineset define="WIN32" if="is-msvc" />

			<includepath path="src/export/include" if="export.dir" />
			<includepath path="src/main/include" />

			&includepath-main-dependencies;
			&libsets-main-dependencies;
		</cc>
	</target>

	<target name="test-compile" depends="package">
		<mkdir dir="target/cpp-test-classes" />
		<available file="target/${configuration.type}/${lib.type}" type="dir" property="main.built" />
		<cc name="${toolchain.compiler}" exceptions="true" outfile="target/testsuite" subsystem="console" multithreaded="true" runtime="${runtime}" outtype="${test.output.type}" objdir="target/cpp-test-classes" debug="${debug}">
			<compiler name="${toolchain.compiler}" unless="is-msvc">
				&compiler-args-gcc;
			</compiler>
			<compiler name="${toolchain.compiler}" if="is-msvc">
				&compiler-args-msvc;
			</compiler>

			<fileset dir="src/test/cpp" includes="**/*.c*" excludes="${test.excludes}" />


			<defineset define="TAO_COMP" />
			<defineset define="WIN32" if="is-msvc" />

			<includepath path="src/test/include" />
			<includepath path="src/export/include" if="export.dir" />
			<includepath path="src/main/include" />
			
			&includepath-test-dependencies;
			&libsets-test-dependencies;
			<libset dir="target/${configuration.type}/${lib.type}" libs="${ant.project.name}" if="main.built" />
		</cc>
		<antcall target="_test-compile-msvc" />
	</target>
	<target name="_test-compile-msvc" if="is-msvc">
		<exec dir="target" executable="mt">
			<arg value="-outputresource:testsuite.dll;#2" />
			<arg value="-manifest" />
			<arg value="testsuite.dll.manifest" />
		</exec>
	</target>


	<target name="test" depends="init">
		<mkdir dir="target/cppunit" />
		<copy todir="target/cpp-test-classes" failonerror="false">
			<fileset dir="src/test/resources" />
		</copy>
		<antcall target="_test-msvc" />
		<antcall target="_test-gcc" />
	</target>
	<target name="_test-gcc" depends="init" unless="is-msvc">
		<exec dir="target/cpp-test-classes" newenvironment="true" resolveexecutable="true" executable="../testsuite" failonerror="${failOnErrorTests}" output="target/cppunit/run.txt" outputproperty="cppunit-run" logError="true">
			<env key="LD_LIBRARY_PATH" value="../dependencies:../../target/${configuration.type}/${lib.type}" />
		</exec>
		<echo message="${cppunit-run}" />
	</target>
	<target name="_test-msvc" depends="init" if="is-msvc">
		<exec dir="target/cpp-test-classes" newenvironment="true" executable="${ATMIBROKER_SRC_DIR}/${ant.project.name}/target/testsuite" failonerror="${failOnErrorTests}" output="target/cppunit/run.txt" outputproperty="cppunit-run" logError="true">
			<env key="PATH" value="${env.PATH};../dependencies;../../target/${configuration.type}/${lib.type}" />
		</exec>
		<echo message="${cppunit-run}" />
	</target>

	<target name="package" depends="init">
		<delete dir="target/dependencies" />
		<mkdir dir="target/dependencies" />
		<copy todir="target/dependencies">
			&libsets-runtime-dependencies;
		</copy>
	</target>
</project>