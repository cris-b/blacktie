
 JBoss, Home of Professional Open Source
 Copyright 2009, Red Hat, Inc., and others contributors as indicated
 by the @authors tag. All rights reserved.
 See the copyright.txt in the distribution for a
 full listing of individual contributors.
 This copyrighted material is made available to anyone wishing to use,
 modify, copy, or redistribute it subject to the terms and conditions
 of the GNU Lesser General Public License, v. 2.1.
 This program is distributed in the hope that it will be useful, but WITHOUT A
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 You should have received a copy of the GNU Lesser General Public License,
 v.2.1 along with this distribution; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 MA  02110-1301, USA.

1. INTRODUCTION
===============
This example shows how to use XA compliant databases with BlackTie and has been tested against Berkeley Db
and ORACLE 11g. To compile in support for Berkeley Db you will need to pass a preprocessor macro called BDB
to the BlackTie utility that generates executables (as explained below). Similary for ORACLE support.

To include a particular database during runtime you will need to update the BlackTie Environment.xml file
with information specific to the required database. The example xml files (in the linux and win32 directories)
includes notes and examples on how to configure ORACLE and BDB support.

Berkeley DB and Oracle 11g can be downloaded from:
http://www.oracle.com/technology/software/products/berkeley-db/index.html
and
http://www.oracle.com/technology/software/products/database/index.html)
respectively.

For example, ON LINUX extract to <USER_HOME>/db-4.7.25
Follow the instructions on: http://www.oracle.com/technology/documentation/berkeley-db/db/ref/build_unix/intro.html
Update the Environment.xml file with the path to the BerkeleyDB library or use the default and set the environment
variable BDB_HOME to the installation directory, for example
    export BDB_HOME=/usr

For WINDOWS extract to c:\db-4.7.25, for examle, and then follow the instructions
at: http://www.oracle.com/technology/documentation/berkeley-db/db/ref/build_win/intro.html
NOTE I needed to alter the db_dll Linker settings to remove bufferoverflowU
NOTE I needed to alter the build profile to be Debug x86 as the default was 64bit
NOTE I get 3 failures during build two for tcl.h and one for jni.h but I ignore these

2. BUILDING THE EXAMPLE
=======================

Make sure your environment is suitable for running BlackTie applications by sourcing the setenv scripts
that came with the BlackTie distribution. On linux systems source:
    $BLACKTIE_BIN_DIR/setenv.sh
and on windows execute:
    %BLACKTIE_BIN_DIR%\setenv.bat

To compile a BlackTie client and server use the generate_client and generate_server scripts that came with the
distribution. The linux versions have a .sh suffix and windows versions have a .bat suffix.

generate_client accepts arguments that specify which files to compile (-Dclient.includes=...), location of any required
include directories (-Dx.inc.dir=) and the location of any required libraries (-Dx.lib.dir= and -Dx.libs=).
[If you need to pass in more include directories and libraries use -Dx.inc.dir2=..., -Dx.lib.dir2=... and -Dx.libs2=...].
It also accepts a list of preprocessor macro definitions (-Dx.define="comma separated list of macro names"). Thus, for example,
to compile the client for use with Oracle11g and Berkely Db:

$BLACKTIE_BIN_DIR/bin/generate_client.sh -Dclient.includes="client.c request.c bdb.c ora.c cutil.c" \
    -Dx.inc.dir="/usr/include" \
    -Dx.inc.dir2="/usr/local/product/11.1.0/db_1/rdbms/public" \
    -Dx.lib.dir="/usr/lib" -Dx.libs="db" \
    -Dx.lib.dir2="/usr/local/product/11.1.0/db_1/lib" -Dx.libs2="occi clntsh" \
    -Dx.define="BDB, ORACLE"

[Notice that /usr/lib and /usr/include have been included to illustrate the use of x.inc.dir2 etc although you
would not normally need to include standard system paths]

Similarly for generating the server:

$BLACKTIE_BIN_DIR/bin/generate_server.sh -Dservice.names=BAR -Dserver.includes="request.c bdb.c ora.c DbService.c" \
    -Dx.inc.dir="/usr/include" \
    -Dx.inc.dir2="/usr/local/product/11.1.0/db_1/rdbms/public" \
    -Dx.lib.dir="/usr/lib" -Dx.libs="db" \
    -Dx.lib.dir2="/usr/local/product/11.1.0/db_1/lib" -Dx.libs2="occi clntsh" \
    -Dx.define="BDB, ORACLE"

If you don't need ORACLE 11g just remove the lines that refer to its libraries and includes (and the ORACLE
preprocessor macro).

Windows compile lines are similar. For example, to build a server for use with Berkeley Db only:

%BLACKTIE_BIN_DIR%/bin/generate_server.bat -Dservice.names=BAR -Dserver.includes="request.c bdb.c ora.c DbService.c" \
    -Dx.inc.dir="C:/db-4.7.25/build_windows/" \
    -Dx.lib.dir="C:/db-4.7.25/build_windows/Debug" \
    -Dx.libs="libdb47${lib.suffix}" \
    -Dx.define="BDB"

3. RUNNING THE EXAMPLE
======================
Start the JBoss server (<JBOSS_HOME>/bin/run.sh|bat -c all)
Make sure all required libraries are on the library path, something like
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/product/11.1.0/db_1/lib
or
    set PATH=%PATH%;C:\db-4.7.25\build_windows\Debug

3.1 START THE SERVER
====================
    ./server -c <win32|linux> -i <unique_id - e.g. 1>

3.2 START THE CLIENT
====================
    ./client

This runs a set of tests that exercise the various ways of interacting with resource managers. Please refer
to the source file cutil.c to see what client/server/transaction combinations are used.

Note: The db records are stored in the directories db1 and db2. If these becomes corrupt or you just want to start afresh
clear out the database by deleting the contents but not the directories themselves (on linux rm db*/*)

APPENDIX: RECOVERY
==================
To test recovery you will need to link against a library that is only available in the test suite (which you'll need to build
from source - the library is called libdummy-rm.so).

When building the client and server define the macro TX_RC as shown below. When the client runs it sends a request to
the server that causes the server to generate a segmentation fault after the prepare phase of the transaction commitment
protocol. This will ensure that there is a pending transaction in need of recovery.

Restart the server. The BlackTie log (blacktie.log) should show the system recovering the failed transaction. The expected
message sequence is:

An entry that indicates BlackTie is attempting the recovery with the following message (for each failed branch):
	"... Recovering resource with branch id: <branch id> and recovery IOR: ..."
Then after one or two minutes the branch should attempt to commit with the following message:
	"... Commiting resource with branch id: <branch id>"

Note also that the Transaction Manager running in the JBoss AS should report messages on the console. One to show the
error that occurs when the server generates a segmentation fault during commit:
	"14:42:23,556 WARN  [loggerI18N] [com.arjuna.ats.internal.jts.resources.rrcaught] ResourceRecord commit - caught exception: org.omg.CORBA.TRANSIENT: Retries exceeded, couldn't reconnect to 127.0.0.1:9032  vmcid: 0x0  minor code: 0  completed: No"

and another message that indicates successful recovery of the pending transaction:
	"14:43:47,576 INFO  [loggerI18N] [com.arjuna.ats.internal.jts.recovery.transactions.TransactionCache_5] [com.arjuna.ats.internal.jts.recovery.transactions.TransactionCache_5] - Transaction 7f000001:e2a7:4aadfb4c:a89 recovery completed"

Required Configuration Changes:
-------------------------------

The XA resource that generates the segmentation fault needs to be included in Environment.xml as follows:
            <XA_RESOURCE>
                <XA_RESOURCE_MGR_ID>202</XA_RESOURCE_MGR_ID>
                <XA_RESOURCE_NAME>DummyDb</XA_RESOURCE_NAME>
                <XA_OPEN_STRING></XA_OPEN_STRING>
                <XA_CLOSE_STRING></XA_CLOSE_STRING>
                <XA_SWITCH>testxasw</XA_SWITCH>
                <XA_LIB_NAME>libdummy-rm.so</XA_LIB_NAME>
            </XA_RESOURCE>

After failure the server needs to either restart on the same ORB endpoint or needs to use a CORBA implementaton repository:
- to use the same end point add something similar to the following in the ORBOPT environment entry (the portspan is required
since the server can start more than one orb so a range of ports is necessary):
	<NAME>ORBOPT</NAME>
    <VALUE>-ORBListenEndpoints iiop://localhost:9032/portspan=10 -ORBInitRef ...</VALUE>
- or to use an implementation repository:
	<NAME>ORBOPT</NAME>
	<VALUE>-ORBUseImR 1 -ORBInitRef ...</VALUE>

Example command line for compiling and linking the server and client (defines the TX_RC macro and links against the
dummy XA resource library):

$BLACKTIE_BIN_DIR/bin/generate_server.sh -Dservice.names=BAR -Dserver.includes="request.c bdb.c ora.c DbService.c" \
     -Dx.inc.dir="$HOME/blacktie/trunk/atmibroker-tx/target/cxx/test/include" \
     -Dx.lib.dir="$HOME/blacktie/trunk/atmibroker-tx/target/cxx/test/lib" -Dx.libs="dummy-rm" \
     -Dx.define="BDB, TX_RC"

$BLACKTIE_BIN_DIR/bin/generate_client.sh -Dclient.includes="client.c request.c bdb.c ora.c cutil.c" \
    -Dx.inc.dir="$HOME/blacktie/trunk/atmibroker-tx/target/cxx/test/include" \
    -Dx.lib.dir="$HOME/blacktie/trunk/atmibroker-tx/target/cxx/test/lib" -Dx.libs="dummy-rm" \
    -Dx.define="BDB, TX_RC"

And to include oracle in the test:

$BLACKTIE_BIN_DIR/bin/generate_server.sh -Dservice.names=BAR -Dserver.includes="request.c bdb.c ora.c DbService.c" \
     -Dx.inc.dir="$HOME/blacktie/trunk/atmibroker-tx/target/cxx/test/include" \
     -Dx.inc.dir2="/usr/local/product/11.1.0/db_1/rdbms/public" \
     -Dx.lib.dir="$HOME/blacktie/trunk/atmibroker-tx/target/cxx/test/lib" -Dx.libs="dummy-rm" \
     -Dx.lib.dir2="/usr/local/product/11.1.0/db_1/lib" -Dx.libs2="occi clntsh" \
     -Dx.define="BDB, ORACLE, TX_RC"

Note that the library path needs to include the location of the dummy-rm library. For example:

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/product/11.1.0/db_1/lib:$HOME/blacktie/trunk/atmibroker-tx/target/cxx/test/lib

Note that recovery implies that the various components in the system need to store state on disk. If things don't go according
to plan you will need to either manually recover the transaction or, since this is only a demo example, manually
clear the logs:

	BlackTie recovery log: rclog and linux/rclog	# safe to delete these logs
	Berkeley db logs: db1/* and db2/*	# safe to delete these logs
	JBossTS logs: $JBOSS_HOME/server/<server name>/data/tx-object-store/
		# probably not wise to delete these unless you know that there are no other transactions in the system

