<!--
	JBoss, Home of Professional Open Source
	Copyright 2009, Red Hat Middleware LLC, and others contributors as indicated
	by the @authors tag. All rights reserved.
	See the copyright.txt in the distribution for a
	full listing of individual contributors.
	This copyrighted material is made available to anyone wishing to use,
	modify, copy, or redistribute it subject to the terms and conditions
	of the GNU Lesser General Public License, v. 2.1.
	This program is distributed in the hope that it will be useful, but WITHOUT A
	WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
	PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
	You should have received a copy of the GNU Lesser General Public License,
	v.2.1 along with this distribution; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
	MA 02110-1301, USA.
-->
<project name="thirdparty" default="install" xmlns:artifact="urn:maven-artifact-ant">

	<property name="project.home" location="." />
	<property file="${project.home}/build.properties" />

	<property name="build.dir" value="build" />
	<property name="build.dist" value="${build.dir}/dist" />
	<property name="buildd.lib" value="${build.dir}/lib" />
	<property name="lib.dir" value="lib" />

	<property name="maven.ant.file" value="maven-ant-tasks-2.0.10.jar" />
	<property name="maven.ant.dir" value="http://apache.inetbridge.net/maven/binaries" />

	<available file="${lib.dir}/${maven.ant.file}" type="file" property="mavend.lib.exists" />

	<target name="bootstrap" unless="mavend.lib.exists">
		<mkdir dir="${lib.dir}" />

		<get src="${maven.ant.dir}/${maven.ant.file}" dest="${lib.dir}/${maven.ant.file}" verbose="true" usetimestamp="true" />
	</target>

	<target name="init" depends="bootstrap">
		<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
			<classpath>
				<pathelement location="${lib.dir}/${maven.ant.file}" />
			</classpath>
		</typedef>
		<mkdir dir="${buildd.lib}" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dist}" />
		<mkdir dir="${build.dist}/include" />
		<mkdir dir="${build.dist}/lib" />
		<fail>
			<condition>
				<and>
					<not>
						<isset property="linux" />
					</not>
					<not>
						<isset property="windows" />
					</not>
				</and>
			</condition>
		</fail>

	</target>

	<target name="clean">
		<delete dir="${build.dir}" />
		<delete dir="${build.dist}" />
	</target>

	<target name="purge">
		<delete dir="${build.dist}/include" />
		<delete dir="${build.dist}/lib" />
		<mkdir dir="${build.dist}/include" />
		<mkdir dir="${build.dist}/lib" />
	</target>

	<target name="thirdparty" depends="log4cxx,cppunit,expat,apr-1,stomp,jbossas,java-devel,ace,xercesc" />
	<target name="install" depends="thirdparty" />

	<target name="jbossas" depends="clean,init">
		<antcall target="purge"/>
		<validate-files inc.dir="${jbossas.lib.dir}" lib.dir="${jbossas.lib.dir}" artifactId="jbossas" />

		<install-file-artifact filename="${jbossas.common.lib.dir}/jbossjts-jacorb.jar" groupId="jboss" artifactId="jbossjts-jacorb" name="jbossjts-jacorb" version="${jbossas.version}" description="jbossjts" />
		<install-file-artifact filename="${jbossas.common.lib.dir}/jbossts-common.jar" groupId="jboss" artifactId="jbossts-common" name="jbossts-common" version="${jbossas.version}" description="jbossjts" />
		<install-file-artifact filename="${jbossas.lib.dir}/jbossjts.jar" groupId="jboss" artifactId="jbossjts" name="jbossjts" version="${jbossas.version}" description="jbossjts" />

		<install-file-artifact filename="${jbossas.lib.dir}/jboss-javaee.jar" groupId="jboss" artifactId="jboss-javaee" name="jboss-javaee" version="${jbossas.version}" description="jboss-javaee" />
		<install-file-artifact filename="${jbossas.lib.dir}/jboss-client.jar" groupId="jboss" artifactId="jboss-client" name="jboss-client" version="${jbossas.version}" description="jboss-client" />
		<install-file-artifact filename="${jbossas.lib.dir}/jboss-logging-spi.jar" groupId="jboss" artifactId="jboss-logging-spi" name="jboss-logging-spi" version="${jbossas.version}" description="jboss-logging-spi" />
		<install-file-artifact filename="${jbossas.lib.dir}/jboss-security-spi.jar" groupId="jboss" artifactId="jboss-security-spi" name="jboss-security-spi" version="${jbossas.version}" description="jboss-security-spi" />
		<install-file-artifact filename="${jbossas.lib.dir}/jboss-serialization.jar" groupId="jboss" artifactId="jboss-serialization" name="jboss-serialization" version="${jbossas.version}" description="jboss-serialization" />
		<install-file-artifact filename="${jbossas.lib.dir}/jboss-common-core.jar" groupId="jboss" artifactId="jboss-common-core" name="jboss-common-core" version="${jbossas.version}" description="jboss-common-core" />
		<install-file-artifact filename="${jbossas.lib.dir}/jboss-remoting.jar" groupId="jboss" artifactId="jboss-remoting" name="jboss-remoting" version="${jbossas.version}" description="jboss-remoting" />
		<install-file-artifact filename="${jbossas.lib.dir}/jbosssx-client.jar" groupId="jboss" artifactId="jbosssx-client" name="jbosssx-client" version="${jbossas.version}" description="jbosssx-client" />
		<install-file-artifact filename="${jbossas.lib.dir}/jboss-messaging-client.jar" groupId="jboss" artifactId="jboss-messaging-client" name="jboss-messaging-client" version="${jbossas.version}" description="jboss-messaging-client" />
		<install-file-artifact filename="${jbossas.lib.dir}/jboss-integration.jar" groupId="jboss" artifactId="jboss-integration" name="jboss-integration" version="${jbossas.version}" description="jboss-integration" />
		<install-file-artifact filename="${jbossas.lib.dir}/concurrent.jar" groupId="jboss" artifactId="concurrent" name="concurrent" version="${jbossas.version}" description="concurrent" />
		<install-file-artifact filename="${jbossas.lib.dir}/jnp-client.jar" groupId="jboss" artifactId="jnp-client" name="jnp-client" version="${jbossas.version}" description="jnp-client" />
		<install-file-artifact filename="${jbossas.lib.dir}/jacorb.jar" groupId="jboss" artifactId="jacorb" name="jacorb" version="${jbossas.version}" description="jacorb" />
		<install-file-artifact filename="${jbossas.lib.dir}/javassist.jar" groupId="jboss" artifactId="javassist" name="javassist" version="${jbossas.version}" description="javassist" />
		<install-file-artifact filename="${jbossas.lib.dir}/trove.jar" groupId="jboss" artifactId="trove" name="trove" version="${jbossas.version}" description="trove" />
		<install-file-artifact filename="${jbossas.lib.dir}/jbossall-client.jar" groupId="jboss" artifactId="jbossall-client" name="jbossall-client" version="${jbossas.version}" description="jbossall-client" />
		<install-file-artifact filename="${jbossas.lib.dir}/jboss-aop-client.jar" groupId="jboss" artifactId="jboss-aop-client" name="jboss-aop-client" version="${jbossas.version}" description="jboss-aop-client" />
		<install-file-artifact filename="${jbossas.lib.dir}/jboss-mdr.jar" groupId="jboss" artifactId="jboss-mdr" name="jboss-mdr" version="${jbossas.version}" description="jboss-mdr" />
		<install-file-artifact filename="${jbossas.lib.dir}/jboss-logging-log4j.jar" groupId="jboss" artifactId="jboss-logging-log4j" name="jboss-logging-log4j" version="${jbossas.version}" description="jboss-logging-log4j" />
		<install-file-artifact filename="${jbossas.lib.dir}/jboss-ejb3-ext-api.jar" groupId="jboss" artifactId="jboss-ejb3-ext-api" name="jboss-ejb3-ext-api" version="${jbossas.version}" description="jboss-ejb3-ext-api" />
	</target>

	<target name="ace-lib-linux" if="linux">
		<sync todir="${build.dist}/lib">
			<fileset dir="${ace.lib.dir}" id="acelibs">
				<include name="libTAO_PI.so.*" />
				<include name="libTAO_Valuetype.so.*" />
				<include name="libTAO_PortableServer.so.*" />
				<include name="libTAO_IORInterceptor.so.*" />
				<include name="libTAO_CodecFactory.so.*" />
				<include name="libACE.so.*" />
				<include name="libTAO_PI_Server.so.*" />
				<include name="libTAO_ObjRefTemplate.so.*" />
				<include name="libTAO_CosNaming.so.*" />
				<include name="libTAO_AnyTypeCode.so.*" />
				<include name="libTAO.so.*" />
				<include name="libTAO_IDL_BE.so.*" />
				<include name="libTAO_IDL_FE.so.*" />
				<include name="libACE_gperf_lib.so.*" />
			</fileset>
		</sync>
		<property name="libace" refid="acelibs"/> 
		<echo message="${libace}" file="${build.dist}/lib/acelinks"/>
		<replaceregexp file="${build.dist}/lib/acelinks"
			match="(lib[^\.]+\.so)([\.0-9]+);?"
			replace="\1 \1\2${line.separator}" 
			flags="g"/>
		<symlink action="record" linkfilename="${build.dist}/lib/acelinks">
			<fileset dir="." includes="${build.dist}/lib/**"/>
		</symlink>
		<symlink action="recreate">
			<fileset dir="." includes="${build.dist}/lib/acelinks"/>  
		</symlink>
	</target>
	<target name="ace-lib-windows" if="windows">
		<sync todir="${build.dist}/lib">
			<fileset dir="${ace.lib.dir}">
				<include name="TAO_PId.dll" />
				<include name="TAO_Valuetyped.dll" />
				<include name="TAO_PortableServerd.dll" />
				<include name="TAO_IORInterceptord.dll" />
				<include name="TAO_CodecFactoryd.dll" />
				<include name="ACEd.dll" />
				<include name="TAO_PI_Serverd.dll" />
				<include name="TAO_ObjRefTemplated.dll" />
				<include name="TAO_CosNamingd.dll" />
				<include name="TAO_AnyTypeCoded.dll" />
				<include name="TAOd.dll" />
				<include name="TAO_IDL_BEd.dll" />
				<include name="TAO_IDL_FEd.dll" />
				<include name="ACE_gperf_lib.dll" />

				<include name="TAO_PId.lib" />
				<include name="TAO_Valuetyped.lib" />
				<include name="TAO_PortableServerd.lib" />
				<include name="TAO_IORInterceptord.lib" />
				<include name="TAO_CodecFactoryd.lib" />
				<include name="ACEd.lib" />
				<include name="TAO_PI_Serverd.lib" />
				<include name="TAO_ObjRefTemplated.lib" />
				<include name="TAO_CosNamingd.lib" />
				<include name="TAO_AnyTypeCoded.lib" />
				<include name="TAOd.lib" />
				<include name="TAO_IDL_BEd.lib" />
				<include name="TAO_IDL_FEd.lib" />
				<include name="ACE_gperf_lib.lib" />
			</fileset>
		</sync>
	</target>
	<target name="ace" depends="clean,init">
		<antcall target="purge"/>
		<validate-files inc.dir="${ace.include.dir}" lib.dir="${ace.lib.dir}" artifactId="ace" />

		<antcall target="ace-lib-linux" />
		<antcall target="ace-lib-windows" />
		<copy todir="${build.dist}/include/ace">
			<fileset dir="${ace.include.dir}/ace">
				<exclude name="**/*examples*/**" />
				<exclude name="**/*tests*/**" />
				<exclude name="**/DevGuideExamples/**" />

				<include name="**/*.h" />
				<include name="**/*.cpp" />
				<include name="**/*.inl" />
			</fileset>
		</copy>
		<copy todir="${build.dist}/include/tao">
			<fileset dir="${ace.include.dir}/TAO/tao">
				<exclude name="**/*examples*/**" />
				<exclude name="**/*tests*/**" />
				<exclude name="**/DevGuideExamples/**" />

				<include name="**/*.h" />
				<include name="**/*.cpp" />
				<include name="**/*.inl" />
				<include name="**/*.idl" />
				<include name="**/*.pidl" />
			</fileset>
		</copy>
		<copy todir="${build.dist}/include/orbsvcs">
			<fileset dir="${ace.include.dir}/TAO/orbsvcs/orbsvcs">
				<exclude name="**/*examples*/**" />
				<exclude name="**/*tests*/**" />
				<exclude name="**/DevGuideExamples/**" />

				<include name="**/*.h" />
				<include name="**/*.inl" />
			</fileset>
		</copy>

		<fail message="cannot find idl compiler or gperf: ${tao.idl.compiler}">
			<condition>
				<not>
					<or>
						<available file="${tao.idl.compiler}" type="file" />
						<available file="${gperf}" type="file" />
					</or>
				</not>
			</condition>
		</fail>
		<copy todir="${build.dist}/bin" file="${tao.idl.compiler}" />
		<copy todir="${build.dist}/bin" file="${ace.gperf}" />

		<install-zip-artifact groupId="ace.contrib" artifactId="ace" name="ace" version="${ace.version}" description="repackage of ACE+TAO, Douglas C. Schmidt's C++ networking toolkit" />
	</target>

	<target name="expat-lib-linux" if="linux">
		<copy file="${expat.lib.dir}/libexpat.so" todir="${build.dist}/lib" />
	</target>
	<target name="expat-lib-windows" if="windows">
		<copy file="${expat.lib.dir}/libexpat.dll" todir="${build.dist}/lib" />
		<copy file="${expat.lib.dir}/libexpat.lib" todir="${build.dist}/lib" />
	</target>
	<target name="expat" depends="clean,init">
		<antcall target="purge"/>
		<validate-files inc.dir="${expat.include.dir}" lib.dir="${expat.lib.dir}" artifactId="expat" />

		<antcall target="expat-lib-linux" />
		<antcall target="expat-lib-windows" />
		<copy todir="${build.dist}/include/expat">
			<fileset dir="${expat.include.dir}">
				<include name="expat.h" />
				<include name="expat_external.h" />
			</fileset>
		</copy>

		<install-artifact groupId="expat.contrib" artifactId="expat" name="expat" version="${expat.version}" description="repackage of expat, the C library for parsing XML, written by James Clark." />
	</target>

	<target name="cppunit-lib-linux" if="linux">
		<copy file="${cppunit.lib.dir}/libcppunit.so" todir="${build.dist}/lib" />
	</target>
	<target name="cppunit-lib-windows" if="windows">
		<copy file="${cppunit.lib.dir}/cppunitd_dll.dll" todir="${build.dist}/lib" />
		<copy file="${cppunit.lib.dir}/cppunitd_dll.lib" todir="${build.dist}/lib" />
	</target>
	<target name="cppunit" depends="clean,init">
		<antcall target="purge"/>
		<validate-files inc.dir="${cppunit.include.dir}" lib.dir="${cppunit.lib.dir}" artifactId="cppunit" />

		<antcall target="cppunit-lib-linux" />
		<antcall target="cppunit-lib-windows" />
		<copy todir="${build.dist}/include/cppunit">
			<fileset dir="${cppunit.include.dir}" />
		</copy>

		<install-artifact groupId="cppunit.contrib" artifactId="cppunit" name="cppunit" version="${cppunit.version}" description="repackage of CppUnit, the C++ port of the famous JUnit framework for unit testing" />
	</target>

	<target name="apr-1-lib-linux" if="linux">
		<copy file="${apr-1.lib.dir}/libapr-1.so" todir="${build.dist}/lib" />
	</target>
	<target name="apr-1-lib-windows" if="windows">
		<copy file="${apr-1.lib.dir}/libapr-1.dll" todir="${build.dist}/lib" />
		<copy file="${apr-1.lib.dir}/libapr-1.lib" todir="${build.dist}/lib" />
	</target>
	<target name="apr-1" depends="clean,init">
		<antcall target="purge"/>
		<validate-files inc.dir="${apr-1.include.dir}" lib.dir="${apr-1.lib.dir}" artifactId="apr-1" />

		<antcall target="apr-1-lib-linux" />
		<antcall target="apr-1-lib-windows" />
		<copy todir="${build.dist}/include/apr-1">
			<fileset dir="${apr-1.include.dir}" includes="*.h" />
		</copy>

		<install-artifact groupId="apr-1.contrib" artifactId="apr-1" name="apr-1" version="${apr-1.version}" description="Apache Portable Runtime (APR)" />
	</target>

	<target name="stomp-lib-linux" if="linux">
		<copy file="${stomp.lib.dir}/libstomp.so" todir="${build.dist}/lib" />
	</target>
	<target name="stomp-lib-windows" if="windows">
		<copy file="${stomp.lib.dir}/libstomp.lib" todir="${build.dist}/lib" />
		<copy file="${stomp.lib.dir}/libstomp.dll" todir="${build.dist}/lib" />
	</target>
	<target name="stomp-linux" if="linux">
		<property name="mvn.exe" value="mvn"/>
	</target>
	<target name="stomp-windows" if="windows">
		<property name="mvn.exe" value="mvn.bat"/>
	</target>
	<target name="stomp" depends="clean,init,stomp-linux,stomp-windows">
		<antcall target="purge"/>
		<validate-files inc.dir="${stomp.include.dir}" lib.dir="${stomp.lib.dir}" artifactId="stomp" />

		<antcall target="stomp-lib-linux" />
		<antcall target="stomp-lib-windows" />
		<copy todir="${build.dist}/include/stomp">
			<fileset dir="${stomp.include.dir}" includes="*.h" />
		</copy>

		<install-artifact groupId="stomp.contrib" artifactId="stomp" name="stomp" version="${stomp.version}" description="Streaming Text Orientated Messaging Protocol message broker wrapper" />
		<exec executable="${mvn.exe}" dir="${stomp.include.dir}/../../stompconnect-1.0" failonerror="true">
			<arg value="install"/>
			<arg value="-DskipTests"/>
		</exec>
	</target>

	<target name="java-devel" depends="clean,init">
		<antcall target="purge"/>
		<fail message="missing directories ${java-devel.include.dir} or ${java-devel.platform.include.dir}">
			<condition>
				<and>
					<not>
						<available file="${java-devel.include.dir}" type="dir" />
					</not>
					<not>
						<available file="${java-devel.platform.include.dir}" type="dir" />
					</not>
				</and>
			</condition>
		</fail>

		<copy todir="${build.dist}/include/">
			<fileset dir="${java-devel.include.dir}" includes="*.h" />
			<fileset dir="${java-devel.platform.include.dir}" includes="*.h" />
		</copy>

		<install-artifact groupId="sun" artifactId="java-devel" name="java-devel" version="${java-devel.version}" description="Java JNI header" />
	</target>


	<target name="log4cxx-lib-linux" if="linux">
		<copy file="${log4cxx.lib.dir}/liblog4cxx.so" todir="${build.dist}/lib" />
	</target>
	<target name="log4cxx-lib-windows" if="windows">
		<copy file="${log4cxx.lib.dir}/log4cxx.dll" todir="${build.dist}/lib" />
		<copy file="${log4cxx.lib.dir}/log4cxx.lib" todir="${build.dist}/lib" />
	</target>

	<target name="log4cxx" depends="clean,init">
		<antcall target="purge"/>
		<validate-files inc.dir="${log4cxx.include.dir}" lib.dir="${log4cxx.lib.dir}" artifactId="log4cxx" />

		<antcall target="log4cxx-lib-linux" />
		<antcall target="log4cxx-lib-windows" />
		<copy todir="${build.dist}/include/log4cxx">
			<fileset dir="${log4cxx.include.dir}" />
		</copy>

		<install-artifact groupId="apache-log4cxx.contrib" artifactId="log4cxx" name="log4cxx" version="${log4cxx.version}" description="Re-packaging of log4cxx, a logging framework for C++ patterned after Apache log4j" />
	</target>

	<target name="xercesc-lib-linux" if="linux">
		<sync todir="${build.dist}/lib">
			<fileset dir="${xercesc.lib.dir}" id="lib">
				<include name="libxerces-c-*.so" />
			</fileset>
		</sync>
		<property name="libxerces" refid="lib"/> 
		<symlink link="${build.dist}/lib/libxerces-c.so" resource="${libxerces}" />
	</target>
	<target name="xercesc-lib-windows" if="windows">
		<copy file="${xercesc.lib.dir}/xerces-c_3_0D.dll" todir="${build.dist}/lib" />
		<copy file="${xercesc.lib.dir}/xerces-c_3D.lib" todir="${build.dist}/lib" />
	</target>

	<target name="xercesc" depends="clean,init">
		<antcall target="purge"/>
		<validate-files inc.dir="${xercesc.include.dir}/xercesc" lib.dir="${xercesc.lib.dir}" artifactId="xercesc" />
		<antcall target="xercesc-lib-linux" />
		<antcall target="xercesc-lib-windows" />
		<copy todir="${build.dist}/include/xercesc">
			<fileset dir="${xercesc.include.dir}/xercesc">
				<include name="**/*.hpp" />
				<include name="**/*.c" />
			</fileset>
		</copy>

		<install-zip-artifact groupId="apache-xercesc.contrib" artifactId="xercesc" name="xercesc" version="${xercesc.version}" description="a validating XML parser written in a portable subset of C++ "/>
	</target>

	<target name="zip-linux" if="linux">
		<exec executable="/bin/sh" dir="${build.dist}">
			<arg line="-c 'zip -y -q -r ../lib/${artifactId}-${version}.zip . -i \'*\''" />
		</exec>
	</target>

	<target name="zip-windows" if="windows">
		<zip destfile="${buildd.lib}/${artifactId}-${version}.zip">
			<fileset dir="${build.dist}" />
		</zip>
	</target>

	<macrodef name="install-artifact">
		<attribute name="groupId" />
		<attribute name="artifactId" />
		<attribute name="name" />
		<attribute name="version" />
		<attribute name="description" />

		<sequential>
			<create-pom groupId="@{groupId}" artifactId="@{artifactId}" name="@{name}" version="@{version}" type="jar" description="@{description}" />

			<jar destfile="${buildd.lib}/@{artifactId}-@{version}.jar">
				<manifest>
					<attribute name="Implementation-Title" value="@{artifactId}" />
					<attribute name="Implementation-Version" value="@{version}" />
				</manifest>
				<fileset dir="${build.dist}" />
			</jar>

			<artifact:pom id="pom" file="${build.dir}/@{artifactId}.pom" />
			<artifact:install file="${buildd.lib}/@{artifactId}-@{version}.jar">
				<pom refid="pom" />
			</artifact:install>
		</sequential>
	</macrodef>

	<macrodef name="install-zip-artifact">
		<attribute name="groupId" />
		<attribute name="artifactId" />
		<attribute name="name" />
		<attribute name="version" />
		<attribute name="description" />

		<sequential>
			<create-pom groupId="@{groupId}" artifactId="@{artifactId}" name="@{name}" version="@{version}" type="zip" description="@{description}" />

			<antcall target="zip-linux">
				<param name="artifactId" value="@{artifactId}" />
				<param name="version" value="@{version}" />
			</antcall>
			<antcall target="zip-windows">
				<param name="artifactId" value="@{artifactId}" />
				<param name="version" value="@{version}" />
			</antcall>

			<artifact:pom id="pom" file="${build.dir}/@{artifactId}.pom" />
			<artifact:install file="${buildd.lib}/@{artifactId}-@{version}.zip">
				<pom refid="pom" />
			</artifact:install>
		</sequential>
	</macrodef>

	<macrodef name="install-file-artifact">
		<attribute name="filename" />
		<attribute name="groupId" />
		<attribute name="artifactId" />
		<attribute name="name" />
		<attribute name="version" />
		<attribute name="description" />

		<sequential>
			<create-pom groupId="@{groupId}" artifactId="@{artifactId}" name="@{name}" version="@{version}" type="jar" description="@{description}" />

			<artifact:pom id="pom" file="${build.dir}/@{artifactId}.pom" />
			<artifact:install file="@{filename}">
				<pom refid="pom" />
			</artifact:install>
		</sequential>
	</macrodef>

	<macrodef name="create-pom">
		<attribute name="groupId" />
		<attribute name="artifactId" />
		<attribute name="name" />
		<attribute name="version" />
		<attribute name="type" />
		<attribute name="description" />
		<sequential>
			<echo file="${build.dir}/@{artifactId}.pom" append="false">&lt;project&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
	&lt;groupId&gt;@{groupId}&lt;/groupId&gt;
	&lt;artifactId&gt;@{artifactId}&lt;/artifactId&gt;
	&lt;name&gt;@{name}&lt;/name&gt;
	&lt;version&gt;@{version}&lt;/version&gt;
	&lt;packaging&gt;@{type}&lt;/packaging&gt;
	&lt;description&gt;@{description}&lt;/description&gt;
&lt;/project&gt;
</echo>
		</sequential>
	</macrodef>

	<macrodef name="validate-files">
		<attribute name="inc.dir" />
		<attribute name="lib.dir" />
		<attribute name="artifactId" />

		<sequential>
			<fail message="missing directories ${inc.dir} or ${lib.dir}">
				<condition>
					<and>
						<available file="${inc.dir}" type="dir" />
						<available file="${lib.dir}" type="dir" />
					</and>
				</condition>
			</fail>
			<mkdir dir="${build.dist}/include/@{artifactId}" />
		</sequential>
	</macrodef>

</project>
