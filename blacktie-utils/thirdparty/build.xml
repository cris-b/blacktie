<!--
	JBoss, Home of Professional Open Source
	Copyright 2009, Red Hat Middleware LLC, and others contributors as indicated
	by the @authors tag. All rights reserved.
	See the copyright.txt in the distribution for a
	full listing of individual contributors.
	This copyrighted material is made available to anyone wishing to use,
	modify, copy, or redistribute it subject to the terms and conditions
	of the GNU Lesser General Public License, v. 2.1.
	This program is distributed in the hope that it will be useful, but WITHOUT A
	WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
	PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
	You should have received a copy of the GNU Lesser General Public License,
	v.2.1 along with this distribution; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
	MA 02110-1301, USA.
-->
<project name="thirdparty" default="install" xmlns:artifact="urn:maven-artifact-ant">

	<property name="project.home" location="."/>
	<property file="${project.home}/build.properties"/>

	<property name="build.dir" value="build"/>
	<property name="build.dist" value="${build.dir}/dist"/>
	<property name="build.lib" value="${build.dir}/lib"/>
	<property name="lib.dir" value="lib"/>

	<property name="maven.ant.file" value="maven-ant-tasks-2.0.9.jar"/>
	<property name="maven.ant.dir" value="http://apache.inetbridge.net/maven/binaries"/>

       	<available file="${lib.dir}/${maven.ant.file}" type="file" property="maven.lib.exists" />

	<target name="bootstrap" unless="maven.lib.exists">
		<mkdir dir="${lib.dir}" />

		<get
			src="${maven.ant.dir}/${maven.ant.file}"
			dest="${lib.dir}/${maven.ant.file}"
			verbose="true"
			usetimestamp="true"/>
	</target>

	<target name="init" depends="bootstrap" >
		<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
			<classpath>
				<pathelement location="${lib.dir}/${maven.ant.file}" />
			</classpath>
		</typedef>
		<mkdir dir="${build.lib}"/>
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.dist}"/>
		<mkdir dir="${build.dist}/include"/>
		<mkdir dir="${build.dist}/lib"/>
	</target>

	<target name="clean">
		<delete dir="${build.dir}"/>
		<delete dir="${build.dist}"/>
	</target>

	<target name="thirdparty" depends="log4cxx,cppunit,ace,expat,stomp,apr-1"/>
	<target name="install" depends="thirdparty"/>

	<target name="ace" depends="clean,init">
		<validate-files inc.dir="${ace.include.dir}" lib.dir="${ace.lib.dir}" artifactId="ace"/>

		<copy todir="${build.dist}/lib">
			<fileset dir="${ace.lib.dir}">
				<include name="libTAO_PI.so*"/>
				<include name="libTAO_Valuetype.so*"/>
				<include name="libTAO_PortableServer.so*"/>
				<include name="libTAO_IORInterceptor.so*"/>
				<include name="libTAO_CodecFactory.so*"/>
				<include name="libACE.so*"/>
				<include name="libTAO_PI_Server.so*"/>
				<include name="libTAO_ObjRefTemplate.so*"/>
				<include name="libTAO_CosNaming.so*"/>
				<include name="libTAO_AnyTypeCode.so*"/>
				<include name="libTAO.so*"/>
				<include name="libTAO_IDL_BE.so.5.6.7"/>
				<include name="libTAO_IDL_FE.so.5.6.7"/>
				<include name="libACE.so.5.6.7"/>
			</fileset>
		</copy>

		<copy todir="${build.dist}/include/ace">
			<fileset dir="${ace.include.dir}/ace">
				<exclude name="**/*examples*/**"/>
				<exclude name="**/*tests*/**"/>
				<exclude name="**/DevGuideExamples/**"/>

				<include name="**/*.h"/>
				<include name="**/*.cpp"/>
				<include name="**/*.inl"/>
			</fileset>
		</copy>
		<copy todir="${build.dist}/include/tao">
			<fileset dir="${ace.include.dir}/TAO/tao">
				<exclude name="**/*examples*/**"/>
				<exclude name="**/*tests*/**"/>
				<exclude name="**/DevGuideExamples/**"/>

				<include name="**/*.h"/>
				<include name="**/*.cpp"/>
				<include name="**/*.inl"/>
				<include name="**/*.idl"/>
				<include name="**/*.pidl"/>
			</fileset>
		</copy>
		<copy todir="${build.dist}/include/orbsvcs">
			<fileset dir="${ace.include.dir}/TAO/orbsvcs/orbsvcs">
				<exclude name="**/*examples*/**"/>
				<exclude name="**/*tests*/**"/>
				<exclude name="**/DevGuideExamples/**"/>

				<include name="**/*.h"/>
				<include name="**/*.inl"/>
			</fileset>
		</copy>

		<fail message="cannot find idl compiler: ${tao.idl.compiler}">
			<condition> <not> <available file="${tao.idl.compiler}" type="file"/> </not> </condition>
		</fail>
		<copy todir="${build.dist}/bin" file="${tao.idl.compiler}"/>

		<install-artifact
			groupId="ace.contrib"
			artifactId="ace"
			name="ace"
			version="${ace.version}"
			description="repackage of ACE+TAO, Douglas C. Schmidt's C++ networking toolkit"/>
	</target>

	<target name="expat" depends="clean,init">
		<validate-files inc.dir="${expat.include.dir}" lib.dir="${expat.lib.dir}" artifactId="expat"/>

		<copy file="${expat.lib.dir}/libexpat.so*" todir="${build.dist}/lib"/>
		<copy todir="${build.dist}/include/expat">
			<fileset dir="${expat.include.dir}">
				<include name="expat.h"/>
				<include name="expat_external.h"/>
			</fileset>
		</copy>

		<install-artifact
			groupId="expat.contrib"
			artifactId="expat"
			name="expat"
			version="${expat.version}"
			description="repackage of expat, the C library for parsing XML, written by James Clark."/>
	</target>

	<target name="cppunit" depends="clean,init">
		<validate-files inc.dir="${cppunit.include.dir}" lib.dir="${cppunit.lib.dir}" artifactId="cppunit"/>

		<copy file="${cppunit.lib.dir}/libcppunit.so*" todir="${build.dist}/lib"/>
		<copy todir="${build.dist}/include/cppunit">
			<fileset dir="${cppunit.include.dir}"/>
		</copy>

		<install-artifact
			groupId="cppunit.contrib"
			artifactId="cppunit"
			name="cppunit"
			version="${cppunit.version}"
			description="repackage of CppUnit, the C++ port of the famous JUnit framework for unit testing"/>
	</target>

	<target name="apr-1" depends="clean,init">
		<validate-files inc.dir="${apr-1.include.dir}" lib.dir="${apr-1.lib.dir}" artifactId="apr-1"/>

		<copy file="${apr-1.lib.dir}/libapr-1.so*" todir="${build.dist}/lib"/>
		<copy todir="${build.dist}/include/apr-1">
			<fileset dir="${apr-1.include.dir}" includes="*.h"/>
		</copy>

		<install-artifact
			groupId="apr-1.contrib"
			artifactId="apr-1"
			name="apr-1"
			version="${apr-1.version}"
			description="Apache Portable Runtime (APR)"/>
	</target>

	<target name="stomp" depends="clean,init">
		<validate-files inc.dir="${stomp.include.dir}" lib.dir="${stomp.lib.dir}" artifactId="stomp"/>

		<copy file="${stomp.lib.dir}/libstomp.so*" todir="${build.dist}/lib"/>
		<copy todir="${build.dist}/include/stomp">
			<fileset dir="${stomp.include.dir}" includes="*.h"/>
		</copy>

		<install-artifact
			groupId="stomp.contrib"
			artifactId="stomp"
			name="stomp"
			version="${stomp.version}"
			description="Streaming Text Orientated Messaging Protocol message broker wrapper"/>
	</target>

	<target name="log4cxx" depends="clean,init">
		<validate-files inc.dir="${log4cxx.include.dir}" lib.dir="${log4cxx.lib.dir}" artifactId="log4cxx"/>

		<copy file="${log4cxx.lib.dir}/liblog4cxx.so*" todir="${build.dist}/lib"/>
		<copy todir="${build.dist}/include/log4cxx">
			<fileset dir="${log4cxx.include.dir}"/>
		</copy>

		<install-artifact
			groupId="apache-log4cxx.contrib"
			artifactId="log4cxx"
			name="log4cxx"
			version="${log4cxx.version}"
			description="Re-packaging of log4cxx, a logging framework for C++ patterned after Apache log4j"/>
	</target>

	<macrodef name="install-artifact">
		<attribute name="groupId" />
		<attribute name="artifactId" />
		<attribute name="name" />
		<attribute name="version" />
		<attribute name="description" />

		<sequential>
			<create-pom
				groupId="@{groupId}"
				artifactId="@{artifactId}"
				name="@{name}"
				version="@{version}"
				description="@{description}"/>

			<jar destfile="${build.lib}/@{artifactId}-@{version}.jar">
				<manifest>
					<attribute name="Implementation-Title" value="@{artifactId}"/>
					<attribute name="Implementation-Version" value="@{version}"/>
				</manifest>
				<fileset dir="${build.dist}"/>
			</jar>

			<artifact:pom id="pom" file="${build.dir}/@{artifactId}.pom"/>
			<artifact:install file="${build.lib}/@{artifactId}-@{version}.jar">
				<pom refid="pom"/>
			</artifact:install>
		</sequential>
	</macrodef>

	<macrodef name="create-pom">
		<attribute name="groupId" />
		<attribute name="artifactId" />
		<attribute name="name" />
		<attribute name="version" />
		<attribute name="description" />
		<sequential>
				<echo file="${build.dir}/@{artifactId}.pom" append="false">&lt;project&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
	&lt;groupId&gt;@{groupId}&lt;/groupId&gt;
	&lt;artifactId&gt;@{artifactId}&lt;/artifactId&gt;
	&lt;name&gt;@{name}&lt;/name&gt;
	&lt;version&gt;@{version}&lt;/version&gt;
	&lt;description&gt;@{description}&lt;/description&gt;
&lt;/project&gt;
</echo>
		</sequential>
	</macrodef>

	<macrodef name="validate-files">
		<attribute name="inc.dir" />
		<attribute name="lib.dir" />
		<attribute name="artifactId" />

		<sequential>
			<fail message="missing directories ${inc.dir} or ${lib.dir}">
				<condition>
					<and>
						<available file="${inc.dir}" type="dir"/>
						<available file="${lib.dir}" type="dir"/>
					</and>
				</condition>
			</fail>
			<mkdir dir="${build.dist}/include/@{artifactId}"/>
		</sequential>
	</macrodef>

</project>
