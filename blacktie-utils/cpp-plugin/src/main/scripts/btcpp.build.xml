<!--
	JBoss, Home of Professional Open Source
	Copyright 2008, Red Hat Middleware LLC, and others contributors as indicated
	by the @authors tag. All rights reserved.
	See the copyright.txt in the distribution for a
	full listing of individual contributors.
	This copyrighted material is made available to anyone wishing to use,
	modify, copy, or redistribute it subject to the terms and conditions
	of the GNU Lesser General Public License, v. 2.1.
	This program is distributed in the hope that it will be useful, but WITHOUT A
	WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
	PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
	You should have received a copy of the GNU Lesser General Public License,
	v.2.1 along with this distribution; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
	MA 02110-1301, USA.
-->
<!DOCTYPE project [
<!ENTITY includepath-java '
<includepath path="${JAVA_HOME}/include" />
<includepath path="${JAVA_HOME}/include/${PLATFORM}" />
'>
<!ENTITY includepath-log4cxx '
<includepath path="${LOG4CXX_ROOT}/src/main/include" />
'>
<!ENTITY libsets-log4cxx '
<fileset dir="${LOG4CXX_ROOT}/target/debug/shared/" includes="${lib.prefix}log4cxx.*"/>
'>
<!ENTITY includepath-expat '
<includepath path="${EXPAT_ROOT}/Source/lib"  if="is-msvc"/>
'>
<!ENTITY libsets-expat '
<fileset dir="${EXPAT_LIB_DIR}" includes="${expat.prefix}expat.*"/>
'>
<!ENTITY includepath-cppunit '
<includepath path="${CPPUNIT_ROOT}/include"  if="is-msvc"/>
'>
<!ENTITY libsets-cppunit '
<fileset dir="${CPPUNIT_LIB_DIR}" includes="${lib.prefix}cppunit${lib.suffix}.*"/>
'>
<!ENTITY includepath-tao '
<includepath path="${ACE_ROOT}" />
<includepath path="${TAO_ROOT}" />
<includepath path="${TAO_ROOT}/orbsvcs" />
'>
<!ENTITY libsets-tao '
<fileset dir="${ACE_ROOT}/lib/" includes="${lib.prefix}TAO_CosNaming${lib.suffix}.*" />
<fileset dir="${ACE_ROOT}/lib/" includes="${lib.prefix}TAO_AnyTypeCode${lib.suffix}.*" />
<fileset dir="${ACE_ROOT}/lib/" includes="${lib.prefix}TAO${lib.suffix}.*" />
<fileset dir="${ACE_ROOT}/lib/" includes="${lib.prefix}TAO_PortableServer${lib.suffix}.*" />
<fileset dir="${ACE_ROOT}/lib/" includes="${lib.prefix}ACE${lib.suffix}.*"/>
<fileset dir="${ACE_ROOT}/lib/" includes="${lib.prefix}TAO_PI${lib.suffix}.*" />
<fileset dir="${ACE_ROOT}/lib/" includes="${lib.prefix}TAO_CodecFactory${lib.suffix}.*" />
<fileset dir="${ACE_ROOT}/lib/" includes="${lib.prefix}TAO_IORInterceptor${lib.suffix}.*" />
<fileset dir="${ACE_ROOT}/lib/" includes="${lib.prefix}TAO_ObjRefTemplate${lib.suffix}.*" />
<fileset dir="${ACE_ROOT}/lib/" includes="${lib.prefix}TAO_Valuetype${lib.suffix}.*" />
<fileset dir="${ACE_ROOT}/lib/" includes="${lib.prefix}TAO_PI_Server${lib.suffix}.*" />
'>
<!ENTITY compiler-args-gcc '
<compilerarg value="-O0" if="debug" />
<compilerarg value="-g3" if="debug" />
<compilerarg value="-O3" unless="debug" />
<compilerarg value="-Wall" />
<compilerarg value="-c" />
<compilerarg value="-fmessage-length=0" />
<compilerarg value="-fPIC" />
'>
<!ENTITY compiler-args-msvc '
<compilerarg value="/wd4820" />
<compilerarg value="/wd4668" />
<compilerarg value="/wd4365" />
<compilerarg value="/wd4996" />
<compilerarg value="/wd4625" />
<compilerarg value="/wd4626" />
<compilerarg value="/wd4619" />
<compilerarg value="/wd4505" />
<compilerarg value="/wd4640"/>
'>
<!ENTITY includepath-main-dependencies '
	&includepath-expat;
	&includepath-tao;
'>
<!ENTITY xlibsets-main-dependencies '
	<libset dir="target/dependencies" libs="${expat.prefix}expat TAO_CosNaming${lib.suffix} TAO_AnyTypeCode${lib.suffix} TAO${lib.suffix} TAO_PortableServer${lib.suffix} ACE${lib.suffix} TAO_PI${lib.suffix} TAO_CodecFactory${lib.suffix} TAO_IORInterceptor${lib.suffix} TAO_ObjRefTemplate${lib.suffix} TAO_Valuetype${lib.suffix} TAO_PI_Server${lib.suffix} log4cxx" />
'>
<!ENTITY libsets-main-dependencies '
	<libset dir="target/dependencies" libs="log4cxx ${expat.prefix}expat TAO_CosNaming${lib.suffix} TAO_AnyTypeCode${lib.suffix} TAO${lib.suffix} TAO_PortableServer${lib.suffix} ACE${lib.suffix}" />
'>
<!ENTITY includepath-test-dependencies '
	&includepath-cppunit;
	&includepath-tao;

	&includepath-java;
'>
<!ENTITY libsets-test-dependencies '
	<libset dir="target/dependencies" libs="cppunit${lib.suffix} ${expat.prefix}expat TAO_CosNaming${lib.suffix} TAO_AnyTypeCode${lib.suffix} TAO${lib.suffix} TAO_PortableServer${lib.suffix} ACE${lib.suffix} TAO_PI${lib.suffix} TAO_CodecFactory${lib.suffix} TAO_IORInterceptor${lib.suffix} TAO_ObjRefTemplate${lib.suffix} TAO_Valuetype${lib.suffix} TAO_PI_Server${lib.suffix}" />
'>
<!ENTITY libsets-runtime-dependencies '
	&libsets-cppunit;
	&libsets-expat;
	&libsets-tao;
'>
]>
<project name="cpp-plugin">
	<taskdef resource="net/sf/antcontrib/antlib.xml" />
	<taskdef resource="cpptasks.tasks" />
	<property environment="env" />
	<property file="build.properties" />
	<property name="src.main" value="src/main/cpp" />
	<property name="src.test" value="src/test/cpp" />
	<property name="src.excludes" value="" />
	<property name="test.excludes" value="" />
	<property name="lib.type" value="shared" />
	<property name="runtime" value="dynamic" />
	<property name="idl.output.dir" value="target/generated/tao_idl" />
	<property name="src.idl.main" value="${idl.output.dir}" />

<!--
          TODO fix it so that every goal doesn't need to define toolchain.compiler and configuration.type
               -->
	<target name="init">
		<fail unless="configuration.type" />
		<fail unless="toolchain.compiler" />
		<condition property="is-msvc">
			<equals arg1="${toolchain.compiler}" arg2="msvc" />
		</condition>
		<condition property="lib.convert.pattern" value="*.dll" else="lib*.so">
			<isset property="is-msvc"/>
		</condition>
		<condition property="export.dir">
			<available file="src/export/include" />
		</condition>
		<condition property="define.dll">
			<and>
				<isset property="is-msvc" />
				<isset property="export.dll" />
			</and>
		</condition>
		<condition property="debug" value="true">
			<equals arg1="${configuration.type}" arg2="debug" casesensitive="false" />
		</condition>
		<condition property="lib.suffix" value="d">
			<and>
				<isset property="is-msvc" />
				<isset property="debug" />
			</and>
		</condition>
		<condition property="lib.suffix" value="">
			<not>
				<equals arg1="lib.suffix" arg2="d" />
			</not>
		</condition>
		<condition property="lib.prefix" value="lib">
			<not>
				<isset property="is-msvc" />
			</not>
		</condition>
		<condition property="lib.prefix" value="">
			<isset property="is-msvc" />
		</condition>
		<condition property="expat.prefix" value="">
			<not>
				<isset property="is-msvc" />
			</not>
		</condition>
		<condition property="expat.prefix" value="lib">
			<isset property="is-msvc" />
		</condition>
	</target>

	<target name="clean" >
		<delete dir="target/classes/lib" failonerror="false"/>
		<delete dir="target/classes/include" failonerror="false"/>
		<delete dir="target/cpp-classes" failonerror="false"/>
		<delete dir="target/cpp-test-classes" failonerror="false"/>
		<delete dir="target/dependencies" failonerror="false"/>
	</target>

	<target name="generate-sources">
		<condition property="tao_idl.exe.exists">
			<available file="${TAO_IDL}" />
		</condition>
		<fail unless="tao_idl.exe.exists" />

		<mkdir dir="${idl.output.dir}" />
		<apply executable="${TAO_IDL}" parallel="false" failonerror="true">
			<env key="ACE_ROOT" path="${ACE_ROOT}" />
			<env key="LD_LIBRARY_PATH" path="${ACE_ROOT}/lib:${ACE_ROOT}/TAO/TAO_IDL" />
			<env key="Path" path="${env.Path}:${ACE_ROOT}/lib:${ACE_ROOT}/TAO/TAO_IDL" />
			<arg line="-o ${idl.output.dir} -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I${ace.root}/TAO -I${ace.root}/TAO/tao -I${ace.root}/TAO/tao/orbsvcs -Isrc/main/idl -Wb,export_macro=ATMIBROKER_IDL_DLL -Wb,export_include=atmiBrokerIdlMacro.h" />
			<fileset dir="src" casesensitive="yes">
				<patternset id="idl.sources">
					<include name="**/*.idl" />
				</patternset>
			</fileset>
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*" to="${idl.output.dir}/*" />
					<mapper>
						<globmapper from="*.idl" to="*C.cpp" />
						<globmapper from="*.idl" to="*C.h" />
						<globmapper from="*.idl" to="*S.cpp" />
						<globmapper from="*.idl" to="*S.h" />
					</mapper>
				</chainedmapper>
			</mapper>

		</apply>
	</target>

	<target name="fileset.main.check">
		<fileset id="fileset.main" dir="${src.main}" includes="**/*.cxx **/*.c **/*.cpp" excludes="${src.excludes}" />
		<pathconvert refid="fileset.main" property="have-srcs" setonempty="false"/>
	</target>
	<target name="fileset.test.check" depends="init">
		<condition property="need-testrunner">
			<and>
				<isset property="generate.testrunner" />
				<equals arg1="${generate.testrunner}" arg2="true"/>
			</and>
		</condition>

		<fileset id="fileset.test" dir="${src.test}" includes="**/*.cxx **/*.c **/*.cpp" excludes="${test.excludes}" />
		<pathconvert refid="fileset.test" property="xhave-tests" setonempty="false"/>
		<condition property="have-tests">
			<and>
				<isset property="xhave-tests" />
				<not>
					<or>
						<equals arg1="${maven.test.skip}" arg2="true"/>
						<equals arg1="${skipTests}" arg2="true"/>
					</or>
				</not>
			</and>
		</condition>
		<!--
		<echo message="have-tests=${have-tests} maven.test.skip=${maven.test.skip} skipTests=${skipTests} xhave-tests=${xhave-tests}" />
		-->
	</target>

	<target name="compile" depends="fileset.main.check,package" if="have-srcs">
	<!--
<echo message="COMPILE: debug=${debug} compiler=${toolchain.compiler}  outtype=${test.output.type} configuration.type=${configuration.type} lib.type=${lib.type} project.artifactId=${project.artifactId} libsetdir=target/cxx/compile/lib compile.libs=${compile.libs}"/>
-->
		<mkdir dir="target/cpp-classes" />
		<mkdir dir="target/${configuration.type}/${lib.type}" />
		<cc name="${toolchain.compiler}" exceptions="true" outfile="target/${configuration.type}/${lib.type}/${project.artifactId}" subsystem="console" multithreaded="true" runtime="${runtime}" outtype="${lib.type}" objdir="target/cpp-classes" debug="${debug}">
			<compiler name="${toolchain.compiler}" unless="is-msvc">
				&compiler-args-gcc;
			</compiler>
			<compiler name="${toolchain.compiler}" if="is-msvc">
				&compiler-args-msvc;
			</compiler>

			<fileset refid="fileset.main"/>

			<defineset define="TAO_COMP" />
			<defineset define="${define.dll}" if="define.dll" />
			<defineset define="WIN32" if="is-msvc" />

			<includepath path="src/export/include" if="export.dir" />
			<includepath path="src/main/include" />
			<includepath path="${src.idl.main}/include" />
			<includepath path="target/cxx/compile/include" />

			<libset dir="${project.build.directory}/cxx/compile/lib" libs="${compile.libs}" if="compile.libs"/>

			&includepath-main-dependencies;
			&libsets-main-dependencies;
		</cc>
	</target>

	<target name="gen-test-runner1" if="need-testrunner">
		<fileset id="fileset.gen.test" dir="${project.build.directory}/generated-sources" includes="**/*.cxx"/>
		<taskdef name="add.common.src" classname="org.jboss.blacktie.plugins.AddCommonSources"/>
		<!-- For includes see java.util.regex.Pattern for valid pattern syntax -->
		<add.common.src mavenProject="gen-common-sources" includes=".*.cxx" outputDir="${project.build.directory}/generated-sources"/>
	</target>
	<target name="gen-test-runner2" unless="need-testrunner">
		<fileset id="fileset.gen.test" dir="." excludes="**/*"/>
	</target>
	<target name="gen-test-runner" depends="gen-test-runner1,gen-test-runner2" />

	<target name="test-compile" depends="fileset.test.check,gen-test-runner,package" if="have-tests">
		<mkdir dir="target/cpp-test-classes" />
		<fail unless="test.output.type" />
		<copy todir="target/cpp-test-classes" failonerror="false">
			<fileset dir="src/test/resources" />
		</copy>
		<available file="target/${configuration.type}/${lib.type}" type="dir" property="main.built" />
		<!--
<echo message="TEST-COMPILE: debug=${debug} compiler=${toolchain.compiler}  outtype=${test.output.type} configuration.type=${configuration.type} lib.type=${lib.type} project.artifactId=${project.artifactId} test.libs=${test.libs} main.built=${main.built} fileset.gen.test=${fileset.gen.test}"/>
-->
		<cc name="${toolchain.compiler}" exceptions="true" outfile="target/testsuite" subsystem="console" multithreaded="true" runtime="${runtime}" outtype="${test.output.type}" objdir="target/cpp-test-classes" debug="${debug}">
			<compiler name="${toolchain.compiler}" unless="is-msvc">
				&compiler-args-gcc;
			</compiler>
			<compiler name="${toolchain.compiler}" if="is-msvc">
				&compiler-args-msvc;
			</compiler>

			<fileset refid="fileset.test"/>
			<fileset refid="fileset.gen.test"/>

			<defineset define="TAO_COMP" />
			<defineset define="WIN32" if="is-msvc" />

			<includepath path="src/test/include" />
			<includepath path="src/export/include" if="export.dir" />
			<includepath path="src/main/include" />
			<includepath path="${src.idl.main}/include" />
			<includepath path="target/cxx/test/include" />

			<libset dir="${project.build.directory}/cxx/test/lib" libs="${test.libs}" if="test.libs"/>

			&includepath-test-dependencies;
			&libsets-test-dependencies;
			<libset dir="target/${configuration.type}/${lib.type}" libs="${project.artifactId}" if="main.built" />
		</cc>
		<available file="target/testsuite.dll.manifest" property="manifest.towrap" />
		<antcall target="_test-compile-msvc" />
	</target>
	<target name="_test-compile-msvc" if="manifest.towrap">
		<exec dir="target" executable="mt">
			<arg value="-outputresource:testsuite.dll;#2" />
			<arg value="-manifest" />
			<arg value="testsuite.dll.manifest" />
		</exec>
	</target>

	<target name="test" depends="fileset.test.check" if="have-tests">
		<mkdir dir="target/cppunit" />
		<antcall target="_test-msvc" />
		<antcall target="_test-gcc" />
	</target>

	<target name="_test-gcc" depends="init" unless="is-msvc">
		<exec dir="target/cpp-test-classes" newenvironment="true" resolveexecutable="true" executable="../testsuite" failonerror="${failOnErrorTests}">
			<redirector output="target/cppunit/run.txt" logError="true" alwayslog="true"/>
			<env key="LD_LIBRARY_PATH" value="../cxx/test/lib:../dependencies:../${configuration.type}/${lib.type}" />
		</exec>
	</target>
	<target name="_test-msvc" depends="init" if="is-msvc">
		<exec dir="target/cpp-test-classes" newenvironment="false" executable="../testsuite" failonerror="${failOnErrorTests}">
			<redirector output="target/cppunit/run.txt" logError="true" alwayslog="true"/>
			<env key="Path" value="${env.Path};..\cxx\test\lib;..\dependencies;..\${configuration.type}\${lib.type}" />
		</exec>
	</target>

	<available property="have-idl" file="${idl.output.dir}" />
	<available property="have-exports" file="src/export/include" />
        <target name="copy-idl" if="have-idl">
                <copy todir="target/classes/include" overwrite="true" failonerror="true">
                        <fileset dir="${idl.output.dir}"/>
                </copy>
	</target>
        <target name="copy-exports" if="have-exports">
                <copy todir="target/classes/include" overwrite="true" failonerror="true">
                        <fileset dir="src/export/include"/>
                </copy>
	</target>
        <target name="copy-libs">
		<available property="have-target-lib-dir" file="target/${configuration.type}/${lib.type}" />
                <copy todir="target/classes/lib" overwrite="true" failonerror="false">
                        <fileset dir="target/${configuration.type}/${lib.type}/" />
                </copy>
        </target>

        <target name="process-classes" depends="package,copy-idl,copy-exports,copy-libs">
        </target>

        <target name="cppunit-lib-check" unless="CPPUNIT_LIB_DIR">
        	<property name="CPPUNIT_LIB_DIR" value="" />
        </target>
        <target name="cppunit-root-check" unless="CPPUNIT_ROOT">
        	<property name="CPPUNIT_ROOT" value="" />
        </target>
        <target name="expat-lib-check" unless="EXPAT_LIB_DIR">
        	<property name="EXPAT_LIB_DIR" value="" />
        </target>
        <target name="expat-root-check" unless="EXPAT_ROOT">
        	<property name="EXPAT_ROOT" value="" />
        </target>

	<target name="package" depends="init,unpack-dependencies,expat-lib-check,expat-root-check,cppunit-lib-check,cppunit-root-check">
        	<mkdir dir="target/classes/lib" />
        	<mkdir dir="target/classes/include" />
		<mkdir dir="target/dependencies" />
		<copy todir="target/dependencies">
			&libsets-runtime-dependencies;
		</copy>
	</target>

        <target name="unpack-dependencies" >
                <unpack id="p1" jarFile="target/compile.classpath" dest="target/cxx/compile"/>
                <unpack id="p2" jarFile="target/test.classpath" dest="target/cxx/test"/>

		<!--
		     put the libraries into a comma separated list for use by cpptasks
		     -->
                <fileset id="fileset.compile.libs" dir="target/cxx/compile/lib" includes="*.so"/>
                <property name="xcompile.libs" value="${toString:fileset.compile.libs}"/>
                <convert-libset libdir="${xcompile.libs}" propname="compile.libs"/>
 
                <fileset id="fileset.test.libs" dir="target/cxx/test/lib" includes="*.so"/>
                <property name="xtest.libs" value="${toString:fileset.test.libs}"/>
                <convert-libset libdir="${xtest.libs}" propname="test.libs"/>

        </target>

	<!--
	     Unzip libraries and includes from the specified list of jar files into the
	     directory specified by the dest attribute. The jarFile attribute is a file
	     containing a colon separated list of paths to the jar file that are to be
	     unzipped.
	     The id attribute just needs to be an arbitary but unique property name
	     (it's only used for iterating through the list of jars).
	     -->
	<macrodef name="unpack">
        	<attribute name="id" />
        	<attribute name="jarFile" />
        	<attribute name="dest" />
        	<element name="some-tasks" optional="no"/>
        	<sequential>
                	<loadfile property="@{id}" srcFile="@{jarFile}"/>
                	<for list="${@{id}}" delimiter=":" param="artifact" trim="yes">
                        	<sequential>
                                	<unzip src="@{artifact}" dest="@{dest}">
                                        	<patternset>
                                                	<include name="**/lib/**"/>
                                                	<include name="**/include/**"/>
                                        	</patternset>
                                	</unzip>
                        	</sequential>
                	</for>
        	</sequential>
	</macrodef>

	<macrodef name="convert-libset">
		<attribute name="propname" />
		<attribute name="libdir" />
		<element name="dotasks" optional="yes"/>
		<sequential>
                	<pathconvert property="@{propname}" pathsep=",">
                        	<path path="@{libdir}"/>
                        	<!--
                        	     flatten and strip off prefix and suffix from the libraries under libdir
                        	     for use as a libset attribute of the cc cpptasks task
                        	     -->
                        	<mapper>
                                	<chainedmapper>
                                        	<flattenmapper/>
                                        	<globmapper from="${lib.convert.pattern}" to="*" casesensitive="no"/>
                                	</chainedmapper>
                        	</mapper>
                	</pathconvert>
                	<dotasks/>
                </sequential>
        </macrodef>

</project>
